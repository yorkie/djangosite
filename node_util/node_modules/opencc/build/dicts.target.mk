# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := dicts
### Rules for action "STCharacters":
quiet_cmd_binding_gyp_dicts_target_STCharacters = ACTION binding_gyp_dicts_target_STCharacters $@
cmd_binding_gyp_dicts_target_STCharacters = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i data/dictionary/STCharacters.txt -o "$(builddir)/STCharacters.ocd" --from text --to ocd

$(builddir)/STCharacters.ocd: obj := $(abs_obj)
$(builddir)/STCharacters.ocd: builddir := $(abs_builddir)
$(builddir)/STCharacters.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/STCharacters.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/STCharacters.ocd: export PRODUCT_NAME := dicts
$(builddir)/STCharacters.ocd: export SDKROOT := 
$(builddir)/STCharacters.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/STCharacters.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/STCharacters.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/STCharacters.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/STCharacters.ocd: TOOLSET := $(TOOLSET)
$(builddir)/STCharacters.ocd: $(builddir)/opencc_dict $(srcdir)/data/dictionary/STCharacters.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_STCharacters)

all_deps += $(builddir)/STCharacters.ocd
action_binding_gyp_dicts_target_STCharacters_outputs := $(builddir)/STCharacters.ocd

### Rules for action "STPhrases":
quiet_cmd_binding_gyp_dicts_target_STPhrases = ACTION binding_gyp_dicts_target_STPhrases $@
cmd_binding_gyp_dicts_target_STPhrases = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i data/dictionary/STPhrases.txt -o "$(builddir)/STPhrases.ocd" --from text --to ocd

$(builddir)/STPhrases.ocd: obj := $(abs_obj)
$(builddir)/STPhrases.ocd: builddir := $(abs_builddir)
$(builddir)/STPhrases.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/STPhrases.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/STPhrases.ocd: export PRODUCT_NAME := dicts
$(builddir)/STPhrases.ocd: export SDKROOT := 
$(builddir)/STPhrases.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/STPhrases.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/STPhrases.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/STPhrases.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/STPhrases.ocd: TOOLSET := $(TOOLSET)
$(builddir)/STPhrases.ocd: $(builddir)/opencc_dict $(srcdir)/data/dictionary/STPhrases.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_STPhrases)

all_deps += $(builddir)/STPhrases.ocd
action_binding_gyp_dicts_target_STPhrases_outputs := $(builddir)/STPhrases.ocd

### Rules for action "TSCharacters":
quiet_cmd_binding_gyp_dicts_target_TSCharacters = ACTION binding_gyp_dicts_target_TSCharacters $@
cmd_binding_gyp_dicts_target_TSCharacters = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i data/dictionary/TSCharacters.txt -o "$(builddir)/TSCharacters.ocd" --from text --to ocd

$(builddir)/TSCharacters.ocd: obj := $(abs_obj)
$(builddir)/TSCharacters.ocd: builddir := $(abs_builddir)
$(builddir)/TSCharacters.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TSCharacters.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TSCharacters.ocd: export PRODUCT_NAME := dicts
$(builddir)/TSCharacters.ocd: export SDKROOT := 
$(builddir)/TSCharacters.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/TSCharacters.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TSCharacters.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TSCharacters.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/TSCharacters.ocd: TOOLSET := $(TOOLSET)
$(builddir)/TSCharacters.ocd: $(builddir)/opencc_dict $(srcdir)/data/dictionary/TSCharacters.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TSCharacters)

all_deps += $(builddir)/TSCharacters.ocd
action_binding_gyp_dicts_target_TSCharacters_outputs := $(builddir)/TSCharacters.ocd

### Rules for action "TSPhrases":
quiet_cmd_binding_gyp_dicts_target_TSPhrases = ACTION binding_gyp_dicts_target_TSPhrases $@
cmd_binding_gyp_dicts_target_TSPhrases = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i data/dictionary/TSPhrases.txt -o "$(builddir)/TSPhrases.ocd" --from text --to ocd

$(builddir)/TSPhrases.ocd: obj := $(abs_obj)
$(builddir)/TSPhrases.ocd: builddir := $(abs_builddir)
$(builddir)/TSPhrases.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TSPhrases.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TSPhrases.ocd: export PRODUCT_NAME := dicts
$(builddir)/TSPhrases.ocd: export SDKROOT := 
$(builddir)/TSPhrases.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/TSPhrases.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TSPhrases.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TSPhrases.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/TSPhrases.ocd: TOOLSET := $(TOOLSET)
$(builddir)/TSPhrases.ocd: $(builddir)/opencc_dict $(srcdir)/data/dictionary/TSPhrases.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TSPhrases)

all_deps += $(builddir)/TSPhrases.ocd
action_binding_gyp_dicts_target_TSPhrases_outputs := $(builddir)/TSPhrases.ocd

### Rules for action "TWVariants":
quiet_cmd_binding_gyp_dicts_target_TWVariants = ACTION binding_gyp_dicts_target_TWVariants $@
cmd_binding_gyp_dicts_target_TWVariants = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i data/dictionary/TWVariants.txt -o "$(builddir)/TWVariants.ocd" --from text --to ocd

$(builddir)/TWVariants.ocd: obj := $(abs_obj)
$(builddir)/TWVariants.ocd: builddir := $(abs_builddir)
$(builddir)/TWVariants.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWVariants.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWVariants.ocd: export PRODUCT_NAME := dicts
$(builddir)/TWVariants.ocd: export SDKROOT := 
$(builddir)/TWVariants.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWVariants.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWVariants.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWVariants.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWVariants.ocd: TOOLSET := $(TOOLSET)
$(builddir)/TWVariants.ocd: $(builddir)/opencc_dict $(srcdir)/data/dictionary/TWVariants.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWVariants)

all_deps += $(builddir)/TWVariants.ocd
action_binding_gyp_dicts_target_TWVariants_outputs := $(builddir)/TWVariants.ocd

### Rules for action "TWVariantsRevPhrases":
quiet_cmd_binding_gyp_dicts_target_TWVariantsRevPhrases = ACTION binding_gyp_dicts_target_TWVariantsRevPhrases $@
cmd_binding_gyp_dicts_target_TWVariantsRevPhrases = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i data/dictionary/TWVariantsRevPhrases.txt -o "$(builddir)/TWVariantsRevPhrases.ocd" --from text --to ocd

$(builddir)/TWVariantsRevPhrases.ocd: obj := $(abs_obj)
$(builddir)/TWVariantsRevPhrases.ocd: builddir := $(abs_builddir)
$(builddir)/TWVariantsRevPhrases.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWVariantsRevPhrases.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWVariantsRevPhrases.ocd: export PRODUCT_NAME := dicts
$(builddir)/TWVariantsRevPhrases.ocd: export SDKROOT := 
$(builddir)/TWVariantsRevPhrases.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWVariantsRevPhrases.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWVariantsRevPhrases.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWVariantsRevPhrases.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWVariantsRevPhrases.ocd: TOOLSET := $(TOOLSET)
$(builddir)/TWVariantsRevPhrases.ocd: $(builddir)/opencc_dict $(srcdir)/data/dictionary/TWVariantsRevPhrases.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWVariantsRevPhrases)

all_deps += $(builddir)/TWVariantsRevPhrases.ocd
action_binding_gyp_dicts_target_TWVariantsRevPhrases_outputs := $(builddir)/TWVariantsRevPhrases.ocd

### Rules for action "JPVariants":
quiet_cmd_binding_gyp_dicts_target_JPVariants = ACTION binding_gyp_dicts_target_JPVariants $@
cmd_binding_gyp_dicts_target_JPVariants = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i data/dictionary/JPVariants.txt -o "$(builddir)/JPVariants.ocd" --from text --to ocd

$(builddir)/JPVariants.ocd: obj := $(abs_obj)
$(builddir)/JPVariants.ocd: builddir := $(abs_builddir)
$(builddir)/JPVariants.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/JPVariants.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/JPVariants.ocd: export PRODUCT_NAME := dicts
$(builddir)/JPVariants.ocd: export SDKROOT := 
$(builddir)/JPVariants.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/JPVariants.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/JPVariants.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/JPVariants.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/JPVariants.ocd: TOOLSET := $(TOOLSET)
$(builddir)/JPVariants.ocd: $(builddir)/opencc_dict $(srcdir)/data/dictionary/JPVariants.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_JPVariants)

all_deps += $(builddir)/JPVariants.ocd
action_binding_gyp_dicts_target_JPVariants_outputs := $(builddir)/JPVariants.ocd

### Rules for action "TWPhrases.txt":
quiet_cmd_binding_gyp_dicts_target_TWPhrases_txt = ACTION binding_gyp_dicts_target_TWPhrases_txt $@
cmd_binding_gyp_dicts_target_TWPhrases_txt = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); data/scripts/merge.py data/dictionary/TWPhrasesIT.txt data/dictionary/TWPhrasesName.txt data/dictionary/TWPhrasesOther.txt "$(builddir)/TWPhrases.txt"

$(builddir)/TWPhrases.txt: obj := $(abs_obj)
$(builddir)/TWPhrases.txt: builddir := $(abs_builddir)
$(builddir)/TWPhrases.txt: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWPhrases.txt: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWPhrases.txt: export PRODUCT_NAME := dicts
$(builddir)/TWPhrases.txt: export SDKROOT := 
$(builddir)/TWPhrases.txt: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWPhrases.txt: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWPhrases.txt: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWPhrases.txt: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWPhrases.txt: TOOLSET := $(TOOLSET)
$(builddir)/TWPhrases.txt: $(builddir)/opencc_dict FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWPhrases_txt)

all_deps += $(builddir)/TWPhrases.txt
action_binding_gyp_dicts_target_TWPhrases_txt_outputs := $(builddir)/TWPhrases.txt

### Rules for action "TWVariantsRev.txt":
quiet_cmd_binding_gyp_dicts_target_TWVariantsRev_txt = ACTION binding_gyp_dicts_target_TWVariantsRev_txt $@
cmd_binding_gyp_dicts_target_TWVariantsRev_txt = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); data/scripts/reverse.py data/dictionary/TWVariants.txt "$(builddir)/TWVariantsRev.txt"

$(builddir)/TWVariantsRev.txt: obj := $(abs_obj)
$(builddir)/TWVariantsRev.txt: builddir := $(abs_builddir)
$(builddir)/TWVariantsRev.txt: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWVariantsRev.txt: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWVariantsRev.txt: export PRODUCT_NAME := dicts
$(builddir)/TWVariantsRev.txt: export SDKROOT := 
$(builddir)/TWVariantsRev.txt: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWVariantsRev.txt: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWVariantsRev.txt: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWVariantsRev.txt: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWVariantsRev.txt: TOOLSET := $(TOOLSET)
$(builddir)/TWVariantsRev.txt: $(builddir)/opencc_dict $(srcdir)/data/dictionary/TWVariants.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWVariantsRev_txt)

all_deps += $(builddir)/TWVariantsRev.txt
action_binding_gyp_dicts_target_TWVariantsRev_txt_outputs := $(builddir)/TWVariantsRev.txt

### Rules for action "TWPhrasesRev.txt":
quiet_cmd_binding_gyp_dicts_target_TWPhrasesRev_txt = ACTION binding_gyp_dicts_target_TWPhrasesRev_txt $@
cmd_binding_gyp_dicts_target_TWPhrasesRev_txt = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); data/scripts/reverse.py "$(builddir)/TWPhrases.txt" "$(builddir)/TWPhrasesRev.txt"

$(builddir)/TWPhrasesRev.txt: obj := $(abs_obj)
$(builddir)/TWPhrasesRev.txt: builddir := $(abs_builddir)
$(builddir)/TWPhrasesRev.txt: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWPhrasesRev.txt: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWPhrasesRev.txt: export PRODUCT_NAME := dicts
$(builddir)/TWPhrasesRev.txt: export SDKROOT := 
$(builddir)/TWPhrasesRev.txt: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWPhrasesRev.txt: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWPhrasesRev.txt: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWPhrasesRev.txt: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWPhrasesRev.txt: TOOLSET := $(TOOLSET)
$(builddir)/TWPhrasesRev.txt: $(builddir)/opencc_dict $(builddir)/TWPhrases.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWPhrasesRev_txt)

all_deps += $(builddir)/TWPhrasesRev.txt
action_binding_gyp_dicts_target_TWPhrasesRev_txt_outputs := $(builddir)/TWPhrasesRev.txt

### Rules for action "TWPhrases":
quiet_cmd_binding_gyp_dicts_target_TWPhrases = ACTION binding_gyp_dicts_target_TWPhrases $@
cmd_binding_gyp_dicts_target_TWPhrases = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i "$(builddir)/TWPhrases.txt" -o "$(builddir)/TWPhrases.ocd" --from text --to ocd

$(builddir)/TWPhrases.ocd: obj := $(abs_obj)
$(builddir)/TWPhrases.ocd: builddir := $(abs_builddir)
$(builddir)/TWPhrases.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWPhrases.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWPhrases.ocd: export PRODUCT_NAME := dicts
$(builddir)/TWPhrases.ocd: export SDKROOT := 
$(builddir)/TWPhrases.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWPhrases.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWPhrases.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWPhrases.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWPhrases.ocd: TOOLSET := $(TOOLSET)
$(builddir)/TWPhrases.ocd: $(builddir)/opencc_dict $(builddir)/TWPhrases.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWPhrases)

all_deps += $(builddir)/TWPhrases.ocd
action_binding_gyp_dicts_target_TWPhrases_outputs := $(builddir)/TWPhrases.ocd

### Rules for action "TWVariantsRev":
quiet_cmd_binding_gyp_dicts_target_TWVariantsRev = ACTION binding_gyp_dicts_target_TWVariantsRev $@
cmd_binding_gyp_dicts_target_TWVariantsRev = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i "$(builddir)/TWVariantsRev.txt" -o "$(builddir)/TWVariantsRev.ocd" --from text --to ocd

$(builddir)/TWVariantsRev.ocd: obj := $(abs_obj)
$(builddir)/TWVariantsRev.ocd: builddir := $(abs_builddir)
$(builddir)/TWVariantsRev.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWVariantsRev.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWVariantsRev.ocd: export PRODUCT_NAME := dicts
$(builddir)/TWVariantsRev.ocd: export SDKROOT := 
$(builddir)/TWVariantsRev.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWVariantsRev.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWVariantsRev.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWVariantsRev.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWVariantsRev.ocd: TOOLSET := $(TOOLSET)
$(builddir)/TWVariantsRev.ocd: $(builddir)/opencc_dict $(builddir)/TWVariantsRev.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWVariantsRev)

all_deps += $(builddir)/TWVariantsRev.ocd
action_binding_gyp_dicts_target_TWVariantsRev_outputs := $(builddir)/TWVariantsRev.ocd

### Rules for action "TWPhrasesRev":
quiet_cmd_binding_gyp_dicts_target_TWPhrasesRev = ACTION binding_gyp_dicts_target_TWPhrasesRev $@
cmd_binding_gyp_dicts_target_TWPhrasesRev = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); "$(builddir)/opencc_dict" -i "$(builddir)/TWPhrasesRev.txt" -o "$(builddir)/TWPhrasesRev.ocd" --from text --to ocd

$(builddir)/TWPhrasesRev.ocd: obj := $(abs_obj)
$(builddir)/TWPhrasesRev.ocd: builddir := $(abs_builddir)
$(builddir)/TWPhrasesRev.ocd: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/TWPhrasesRev.ocd: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/TWPhrasesRev.ocd: export PRODUCT_NAME := dicts
$(builddir)/TWPhrasesRev.ocd: export SDKROOT := 
$(builddir)/TWPhrasesRev.ocd: export SRCROOT := ${abs_srcdir}/
$(builddir)/TWPhrasesRev.ocd: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/TWPhrasesRev.ocd: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/TWPhrasesRev.ocd: export TEMP_DIR := ${TMPDIR}
$(builddir)/TWPhrasesRev.ocd: TOOLSET := $(TOOLSET)
$(builddir)/TWPhrasesRev.ocd: $(builddir)/opencc_dict $(builddir)/TWPhrasesRev.txt FORCE_DO_CMD
	$(call do_cmd,binding_gyp_dicts_target_TWPhrasesRev)

all_deps += $(builddir)/TWPhrasesRev.ocd
action_binding_gyp_dicts_target_TWPhrasesRev_outputs := $(builddir)/TWPhrasesRev.ocd


### Rules for final target.
# Build our special outputs first.
$(obj).target/dicts.stamp: | $(action_binding_gyp_dicts_target_STCharacters_outputs) $(action_binding_gyp_dicts_target_STPhrases_outputs) $(action_binding_gyp_dicts_target_TSCharacters_outputs) $(action_binding_gyp_dicts_target_TSPhrases_outputs) $(action_binding_gyp_dicts_target_TWVariants_outputs) $(action_binding_gyp_dicts_target_TWVariantsRevPhrases_outputs) $(action_binding_gyp_dicts_target_JPVariants_outputs) $(action_binding_gyp_dicts_target_TWPhrases_txt_outputs) $(action_binding_gyp_dicts_target_TWVariantsRev_txt_outputs) $(action_binding_gyp_dicts_target_TWPhrasesRev_txt_outputs) $(action_binding_gyp_dicts_target_TWPhrases_outputs) $(action_binding_gyp_dicts_target_TWVariantsRev_outputs) $(action_binding_gyp_dicts_target_TWPhrasesRev_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_dicts_target_STCharacters_outputs) $(action_binding_gyp_dicts_target_STPhrases_outputs) $(action_binding_gyp_dicts_target_TSCharacters_outputs) $(action_binding_gyp_dicts_target_TSPhrases_outputs) $(action_binding_gyp_dicts_target_TWVariants_outputs) $(action_binding_gyp_dicts_target_TWVariantsRevPhrases_outputs) $(action_binding_gyp_dicts_target_JPVariants_outputs) $(action_binding_gyp_dicts_target_TWPhrases_txt_outputs) $(action_binding_gyp_dicts_target_TWVariantsRev_txt_outputs) $(action_binding_gyp_dicts_target_TWPhrasesRev_txt_outputs) $(action_binding_gyp_dicts_target_TWPhrases_outputs) $(action_binding_gyp_dicts_target_TWVariantsRev_outputs) $(action_binding_gyp_dicts_target_TWPhrasesRev_outputs): | $(builddir)/opencc_dict

$(obj).target/dicts.stamp: TOOLSET := $(TOOLSET)
$(obj).target/dicts.stamp: $(builddir)/opencc_dict FORCE_DO_CMD
	$(call do_cmd,touch)

all_deps += $(obj).target/dicts.stamp
# Add target alias
.PHONY: dicts
dicts: $(obj).target/dicts.stamp

# Add target alias to "all" target.
.PHONY: all
all: dicts

